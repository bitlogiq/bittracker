name: iOS TestFlight

on:
  push:
    branches: [ main, master ]
    paths:
      - "ios/**"
      - "lib/**"
      - "pubspec.yaml"
      - ".github/workflows/ios-testflight.yml"
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-14

    env:
      FLUTTER_VERSION: "3.35.1"
      IOS_BUNDLE_ID: ${{ secrets.IOS_BUNDLE_ID }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      ASC_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
      ASC_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}   # ← fixed here
      ASC_PRIVATE_KEY_B64: ${{ secrets.ASC_PRIVATE_KEY_B64 }}
      IOS_P12_B64: ${{ secrets.IOS_P12_B64 }}
      IOS_P12_PASSWORD: ${{ secrets.IOS_P12_PASSWORD }}
      IOS_MOBILEPROVISION_B64: ${{ secrets.IOS_MOBILEPROVISION_B64 }}
      NSUnbufferedIO: "YES"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate required secrets
        shell: bash
        run: |
          set -e
          fail=0
          for v in IOS_BUNDLE_ID APPLE_TEAM_ID ASC_KEY_ID ASC_ISSUER_ID ASC_PRIVATE_KEY_B64 IOS_P12_B64 IOS_P12_PASSWORD IOS_MOBILEPROVISION_B64; do
            if [ -z "${!v}" ]; then echo "::error ::Missing secret: $v"; fail=1; fi
          done
          [ "$fail" -ne 0 ] && exit 1 || echo "✅ Secrets present"

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Flutter precache & pub get (ensures ios/Flutter/Generated.xcconfig)
        shell: bash
        run: |
          flutter --version
          flutter precache --ios
          flutter pub get
          test -f ios/Flutter/Generated.xcconfig && echo "✅ Generated.xcconfig present" || (echo "::error ::Generated.xcconfig missing" && exit 1)

      - name: Install Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"

      - name: Install fastlane & cocoapods
        shell: bash
        run: |
          gem install --no-document fastlane -v ">=2.222"
          gem install --no-document cocoapods -v "~>1.15"
          pod --version
          fastlane --version

      - name: CocoaPods install
        working-directory: ios
        shell: bash
        run: |
          pod repo update
          pod install
          test -d Runner.xcworkspace && echo "✅ xcworkspace present" || (echo "::error ::Runner.xcworkspace not created" && exit 1)

      - name: Decode signing & ASC key
        shell: bash
        run: |
          set -e
          (echo "$IOS_P12_B64" | tr -d '\n\r' | base64 -D > dist.p12) || (echo "$IOS_P12_B64" | base64 -d > dist.p12)
          (echo "$IOS_MOBILEPROVISION_B64" | tr -d '\n\r' | base64 -D > app.mobileprovision) || (echo "$IOS_MOBILEPROVISION_B64" | base64 -d > app.mobileprovision)
          (echo "$ASC_PRIVATE_KEY_B64" | tr -d '\n\r' | base64 -D > AuthKey.p8) || (echo "$ASC_PRIVATE_KEY_B64" | base64 -d > AuthKey.p8)
          echo "Sizes:"; ls -lah dist.p12 app.mobileprovision AuthKey.p8
          KEY_ESCAPED=$(awk '{gsub(/"/,"\\\""); printf "%s\\n",$0}' AuthKey.p8)
          cat > AuthKey.json <<JSON
          {"key_id":"$ASC_KEY_ID","issuer_id":"$ASC_ISSUER_ID","key":"$KEY_ESCAPED","duration":1200,"in_house":false}
          JSON

      - name: Verify p12 password
        shell: bash
        run: |
          set -e
          openssl pkcs12 -in dist.p12 -passin pass:"$IOS_P12_PASSWORD" -nokeys -clcerts -info >/dev/null
          echo "✅ p12 password OK"

      - name: Install signing cert & provisioning profile (robust)
        shell: bash
        run: |
          set -e
          KEYCHAIN=build.keychain
          PW=ci_temp_123
          security create-keychain -p "$PW" "$KEYCHAIN"
          security set-keychain-settings -lut 21600 "$KEYCHAIN"
          security unlock-keychain -p "$PW" "$KEYCHAIN"
          security list-keychains -d user -s "$KEYCHAIN"

          if ! openssl pkcs12 -in dist.p12 -passin pass:"$IOS_P12_PASSWORD" -nokeys -clcerts -info >/dev/null 2>&1; then
            echo "::error ::OpenSSL could not read the P12 with the provided password. Check IOS_P12_PASSWORD and base64 content."
            exit 1
          fi

          if security import dist.p12 -k "$KEYCHAIN" -P "$IOS_P12_PASSWORD" -A -T /usr/bin/codesign >/dev/null 2>&1; then
            echo "✅ Imported P12 with provided password"
          elif security import dist.p12 -k "$KEYCHAIN" -P "" -A -T /usr/bin/codesign >/dev/null 2>&1; then
            echo "✅ Imported P12 with empty password"
          else
            echo "🧰 Fallback: split-import via PEM"
            openssl pkcs12 -in dist.p12 -passin pass:"$IOS_P12_PASSWORD" -clcerts -nokeys -out dist_cert.pem
            openssl pkcs12 -in dist.p12 -passin pass:"$IOS_P12_PASSWORD" -nocerts -nodes -out dist_key.pem
            security import dist_cert.pem -k "$KEYCHAIN" -A -T /usr/bin/codesign
            security import dist_key.pem  -k "$KEYCHAIN" -A -T /usr/bin/codesign
          fi

          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$PW" "$KEYCHAIN"
          security find-identity -v -p codesigning "$KEYCHAIN" || true

          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          PLIST=$(/usr/bin/security cms -D -i app.mobileprovision)
          UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< "$PLIST")
          NAME=$(/usr/libexec/PlistBuddy -c 'Print :Name' /dev/stdin <<< "$PLIST")
          NAME_CLEAN="${NAME%.mobileprovision}"
          cp app.mobileprovision "$HOME/Library/MobileDevice/Provisioning Profiles/$UUID.mobileprovision"
          echo "PROFILE_UUID=$UUID"       >> $GITHUB_ENV
          echo "PROFILE_NAME=$NAME_CLEAN" >> $GITHUB_ENV
          echo "✅ Installed profile: $NAME_CLEAN ($UUID)"

      - name: Print effective signing settings (pre-build)
        shell: bash
        run: |
          xcodebuild -showBuildSettings -workspace ios/Runner.xcworkspace -scheme Runner | egrep "PRODUCT_BUNDLE_IDENTIFIER|CODE_SIGN|DEVELOPMENT_TEAM|PROVISIONING_PROFILE" || true

      - name: Create exportOptions.plist
        shell: bash
        run: |
          cat > exportOptions.plist <<PLIST
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
            <dict>
              <key>method</key>
              <string>app-store</string>
              <key>provisioningProfiles</key>
              <dict>
                <key>${IOS_BUNDLE_ID}</key>
                <string>${PROFILE_NAME}</string>
              </dict>
            </dict>
          </plist>
          PLIST
          /usr/bin/plutil -lint exportOptions.plist

      - name: Bump build number
        shell: bash
        run: |
          fastlane run increment_build_number \
            xcodeproj:"ios/Runner.xcodeproj" \
            build_number:"${GITHUB_RUN_NUMBER}"

      - name: Build IPA (Manual signing + force Distribution identity)
        shell: bash
        run: |
          set -e
          fastlane run build_app \
            workspace:"ios/Runner.xcworkspace" \
            scheme:"Runner" \
            export_method:"app-store" \
            configuration:"Release" \
            clean:true \
            include_bitcode:false \
            output_directory:"ios/build" \
            output_name:"BitTracker.ipa" \
            xcodebuild_formatter:"" \
            xcargs:"ONLY_ACTIVE_ARCH=NO PRODUCT_BUNDLE_IDENTIFIER=${IOS_BUNDLE_ID} DEVELOPMENT_TEAM=${APPLE_TEAM_ID} CODE_SIGN_STYLE=Manual CODE_SIGN_IDENTITY=Apple\ Distribution PROVISIONING_PROFILE_SPECIFIER=${PROFILE_UUID} PROVISIONING_PROFILE=${PROFILE_UUID} OTHER_CODE_SIGN_FLAGS=--keychain\ build.keychain" \
            export_options:"exportOptions.plist"

          ls -la ios/build || true

      - name: Debug • Tail xcodebuild/gym log
        if: failure()
        shell: bash
        run: |
          LOG="$HOME/Library/Logs/gym/Runner-Runner.log"
          echo "---- show last 300 lines of gym log ----"
          if [ -f "$LOG" ]; then
            tail -n 300 "$LOG" || true
          else
            echo "No gym log found at $LOG"
          fi
          echo "----------------------------------------"

      - name: Upload IPA & logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-artifacts
          path: |
            ios/build/**/*.ipa
            $HOME/Library/Logs/gym/**
          if-no-files-found: warn
