name: iOS TestFlight

on:
  push:
    branches: [ main, master ]
    paths:
      - "ios/**"
      - "lib/**"
      - "pubspec.yaml"
      - ".github/workflows/ios-testflight.yml"
  workflow_dispatch: {}

jobs:
  ios:
    runs-on: macos-14

    env:
      FLUTTER_VERSION: '3.35.1'
      IOS_BUNDLE_ID: ${{ secrets.IOS_BUNDLE_ID }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      APPLE_ID_EMAIL: ${{ secrets.APPLE_ID_EMAIL }}
      ASC_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
      ASC_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
      ASC_PRIVATE_KEY: ${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug • Repo state
        run: |
          echo "✅ Repo checked out"
          echo "PWD=$(pwd)"
          echo "Top-level files:"
          ls -la
          echo "Pubspec present?"; test -f pubspec.yaml && echo "Yes" || (echo "No" && exit 1)

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Debug • Flutter toolchain
        run: |
          set -e
          echo "✅ Flutter installed"
          flutter --version
          which flutter

      # --- Prepare Flutter for iOS ---
      - name: Precache iOS and fetch packages
        run: |
          set -e
          flutter precache --ios
          flutter pub get

      - name: Debug • After pub get
        run: |
          echo "✅ flutter pub get complete"
          echo "Dart/Flutter cache dirs:"
          echo "$HOME/.pub-cache"
          echo "$HOME/Library/Developer/Xcode/DerivedData (may be empty yet)"
          echo "ios/ exists?"; test -d ios && echo "Yes" || (echo "No" && exit 1)

      # --- Safety net: ensure ios/Flutter/podhelper.rb exists ---
      - name: Ensure podhelper.rb exists (fallback)
        shell: bash
        run: |
          set -e
          mkdir -p ios/Flutter
          FLUTTER_BIN="$(which flutter)"
          FLUTTER_ROOT="$(cd "$(dirname "$FLUTTER_BIN")/.." && pwd)"
          if [ ! -f ios/Flutter/podhelper.rb ]; then
            cp "$FLUTTER_ROOT/packages/flutter_tools/bin/podhelper.rb" ios/Flutter/podhelper.rb
          fi
          echo "✅ podhelper.rb ensured"
          ls -lah ios/Flutter

      # --- Export FLUTTER_ROOT for CocoaPods ---
      - name: Export FLUTTER_ROOT for CocoaPods
        shell: bash
        run: |
          set -e
          FLUTTER_BIN="$(which flutter)"
          FLUTTER_ROOT="$(cd "$(dirname "$FLUTTER_BIN")/.." && pwd)"
          echo "FLUTTER_ROOT=$FLUTTER_ROOT" >> "$GITHUB_ENV"
          echo "✅ FLUTTER_ROOT exported: $FLUTTER_ROOT"

      # --- Ruby / Fastlane / CocoaPods ---
      - name: Install Ruby + fastlane + cocoapods
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: false

      - name: Install gems
        run: |
          set -e
          gem install --no-document cocoapods -v "~> 1.15"
          gem install --no-document fastlane   -v ">= 2.222"
          echo "✅ Gems installed: cocoapods & fastlane"
          pod --version
          fastlane --version

      - name: CocoaPods install
        run: |
          set -e
          cd ios
          pod repo update
          pod install
          echo "✅ pod install complete"
          ls -lah
          ls -lah Pods || true
          ls -lah Runner.xcworkspace

      # --- App Store Connect API key file ---
      - name: Create App Store Connect API key file
        shell: bash
        run: |
          set -e
          cat > AuthKey.json <<'JSON'
          {
            "key_id": "${ASC_KEY_ID}",
            "issuer_id": "${ASC_ISSUER_ID}",
            "key": "${ASC_PRIVATE_KEY}",
            "duration": 1200,
            "in_house": false
          }
          JSON
          echo "✅ AuthKey.json created (not printing contents for security)"
          ls -lah AuthKey.json

      # --- Build IPA ---
      - name: Build IPA
        run: |
          set -e
          echo "Using:"
          echo "  IOS_BUNDLE_ID=${IOS_BUNDLE_ID}"
          echo "  APPLE_TEAM_ID=${APPLE_TEAM_ID}"
          fastlane run build_app \
            scheme:"Runner" \
            workspace:"ios/Runner.xcworkspace" \
            export_method:"app-store" \
            clean:true \
            include_bitcode:false \
            output_directory:"ios/build" \
            output_name:"BitTracker.ipa" \
            xcargs:"DEVELOPMENT_TEAM=${APPLE_TEAM_ID} PRODUCT_BUNDLE_IDENTIFIER=${IOS_BUNDLE_ID}"
          echo "✅ Build complete"
          ls -lah ios/build

      # --- Upload to TestFlight ---
      - name: Upload to TestFlight
        run: |
          set -e
          fastlane run upload_to_testflight \
            api_key_path:"AuthKey.json" \
            skip_waiting_for_build_processing:true \
            distribute_external:false
          echo "✅ Upload to TestFlight initiated"

      # --- Keep artifacts (IPA) ---
      - name: Keep artifacts (IPA)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: ios/build/*.ipa
          if-no-files-found: warn

      - name: Debug • Finished
        if: always()
        run: |
          echo "🏁 Workflow finished (status may be success or failure above)."
