name: iOS TestFlight

on:
  push:
    branches: [ main, master ]
    paths:
      - "ios/**"
      - "lib/**"
      - "pubspec.yaml"
      - ".github/workflows/ios-testflight.yml"
  workflow_dispatch: {}

jobs:
  ios:
    runs-on: macos-14

    env:
      # Flutter
      FLUTTER_VERSION: '3.35.1'

      # App identifiers (hardcoded here for convenience)
      IOS_BUNDLE_ID: za.co.bitlogiq.bittracker
      APPLE_TEAM_ID: R4R4AW7JUQ

      # App Store Connect API (for uploading to TestFlight)
      ASC_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
      ASC_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
      ASC_PRIVATE_KEY_B64: ${{ secrets.ASC_PRIVATE_KEY_B64 }}

      # Signing artifacts (provided via GitHub Secrets, no match)
      IOS_P12_B64: ${{ secrets.IOS_P12_B64 }}
      IOS_P12_PASSWORD: ${{ secrets.IOS_P12_PASSWORD }}
      IOS_MOBILEPROVISION_B64: ${{ secrets.IOS_MOBILEPROVISION_B64 }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- Validate required secrets early ----------
      - name: Validate required secrets
        run: |
          set -e
          fail=0
          [ -z "${ASC_KEY_ID}" ] && echo "::error ::APP_STORE_CONNECT_KEY_ID is missing" && fail=1
          [ -z "${ASC_ISSUER_ID}" ] && echo "::error ::APP_STORE_CONNECT_ISSUER_ID is missing" && fail=1
          [ -z "${ASC_PRIVATE_KEY_B64}" ] && echo "::error ::ASC_PRIVATE_KEY_B64 is missing (base64 of your .p8)" && fail=1
          [ -z "${IOS_P12_B64}" ] && echo "::error ::IOS_P12_B64 is missing (base64 of dist.p12)" && fail=1
          [ -z "${IOS_P12_PASSWORD}" ] && echo "::error ::IOS_P12_PASSWORD is missing (password for dist.p12)" && fail=1
          [ -z "${IOS_MOBILEPROVISION_B64}" ] && echo "::error ::IOS_MOBILEPROVISION_B64 is missing (base64 of .mobileprovision)" && fail=1
          [ $fail -ne 0 ] && exit 1 || echo "✅ Secrets present"

      # ---------- Flutter / Pods ----------
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          cache: true

      - name: Precache iOS & pub get
        run: |
          set -e
          flutter precache --ios
          flutter pub get

      - name: Export FLUTTER_ROOT
        shell: bash
        run: |
          set -e
          FLUTTER_BIN="$(which flutter)"
          FLUTTER_ROOT="$(cd "$(dirname "$FLUTTER_BIN")/.." && pwd)"
          echo "FLUTTER_ROOT=$FLUTTER_ROOT" >> "$GITHUB_ENV"

      - name: Normalize Generated.xcconfig (Windows path guard)
        run: |
          set -e
          if [ -f ios/Flutter/Generated.xcconfig ] && grep -qi '^FLUTTER_ROOT=c:' ios/Flutter/Generated.xcconfig; then
            rm -f ios/Flutter/Generated.xcconfig
            flutter pub get
          fi
          test -f ios/Flutter/Generated.xcconfig || (echo "Generated.xcconfig missing after regen" && exit 1)

      - name: Install Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: false

      - name: Install gems (cocoapods + fastlane)
        run: |
          set -e
          gem install --no-document cocoapods -v "~> 1.15"
          gem install --no-document fastlane   -v ">= 2.222"
          pod --version
          fastlane --version

      - name: Reset Pods
        run: rm -rf ios/Pods ios/Podfile.lock

      - name: Pod repo update & install
        working-directory: ios
        run: |
          set -e
          pod repo update
          pod install

      # ---------- Early sanity build (no signing) ----------
      - name: Build iOS (no codesign)
        run: |
          set -e
          flutter build ios --release --no-codesign

      - name: Inspect bundle identifiers
        run: |
          echo "Bundle IDs in project:"
          grep -R "PRODUCT_BUNDLE_IDENTIFIER" -n ios/Runner.xcodeproj/project.pbxproj | sed 's/.*= "\(.*\)";/\1/' | sort -u || true

      # ---------- Decode & verify App Store Connect API key ----------
      - name: Create App Store Connect API key file (verify curve)
        shell: bash
        env:
          ASC_PRIVATE_KEY_B64: ${{ env.ASC_PRIVATE_KEY_B64 }}
          ASC_KEY_ID: ${{ env.ASC_KEY_ID }}
          ASC_ISSUER_ID: ${{ env.ASC_ISSUER_ID }}
        run: |
          set -e
          echo "${ASC_PRIVATE_KEY_B64}" | base64 -d > AuthKey.p8
          if ! openssl pkey -in AuthKey.p8 -noout -text 2>/dev/null | grep -qiE 'prime256v1|secp256r1'; then
            echo "::error ::API key is not EC P-256 (ES256). Recreate a Team Key in App Store Connect → App Store Connect API."; exit 1
          fi
          KEY_ESCAPED=$(awk '{gsub(/"/, "\\\""); printf "%s\\n", $0 }' AuthKey.p8)
          cat > AuthKey.json <<JSON
          { "key_id": "${ASC_KEY_ID}", "issuer_id": "${ASC_ISSUER_ID}", "key": "${KEY_ESCAPED}", "duration": 1200, "in_house": false }
          JSON

      # ---------- Install cert & provisioning profile from secrets (NO Apple account needed) ----------
      - name: Install signing assets
        shell: bash
        env:
          IOS_P12_B64: ${{ env.IOS_P12_B64 }}
          IOS_P12_PASSWORD: ${{ env.IOS_P12_PASSWORD }}
          IOS_MOBILEPROVISION_B64: ${{ env.IOS_MOBILEPROVISION_B64 }}
        run: |
          set -e
          # Decode
          echo "${IOS_P12_B64}" | base64 -d > dist.p12
          echo "${IOS_MOBILEPROVISION_B64}" | base64 -d > app.mobileprovision

          # Create a temporary keychain
          KEYCHAIN=build.keychain
          KEYCHAIN_PW=temp_password_123
          security create-keychain -p "$KEYCHAIN_PW" "$KEYCHAIN"
          security set-keychain-settings -lut 21600 "$KEYCHAIN"
          security unlock-keychain -p "$KEYCHAIN_PW" "$KEYCHAIN"
          security list-keychains -d user -s "$KEYCHAIN"

          # Import p12
          security import dist.p12 -k "$KEYCHAIN" -P "$IOS_P12_PASSWORD" -A -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PW" "$KEYCHAIN"

          # Install provisioning profile
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< "$(/usr/bin/security cms -D -i app.mobileprovision)")
          NAME=$(/usr/libexec/PlistBuddy -c 'Print :Name' /dev/stdin <<< "$(/usr/bin/security cms -D -i app.mobileprovision)")
          cp app.mobileprovision "$HOME/Library/MobileDevice/Provisioning Profiles/$UUID.mobileprovision"

          echo "PROFILE_UUID=$UUID" >> "$GITHUB_ENV"
          echo "PROFILE_NAME=$NAME" >> "$GITHUB_ENV"
          echo "✅ Installed profile $NAME ($UUID)"

      # ---------- Apply MANUAL signing to the project ----------
      - name: Apply manual code signing (Runner target)
        run: |
          set -e
          # Find the distribution identity name
          IDENTITY=$(security find-identity -v -p codesigning build.keychain | awk -F\" '/Apple Distribution/ { print $2; exit }')
          if [ -z "$IDENTITY" ]; then
            echo "::error ::No Apple Distribution identity found in keychain"; security find-identity -v -p codesigning build.keychain; exit 1
          fi
          echo "Using identity: $IDENTITY"

          fastlane run update_code_signing_settings \
            use_automatic_signing:false \
            team_id:"${APPLE_TEAM_ID}" \
            code_sign_identity:"$IDENTITY" \
            bundle_identifier:"${IOS_BUNDLE_ID}" \
            profile_name:"${PROFILE_NAME}" \
            path:"ios/Runner.xcodeproj"

      # ---------- Bump build number so each upload is unique ----------
      - name: Bump build number (CI run number)
        run: |
          set -e
          fastlane run increment_build_number \
            xcodeproj:"ios/Runner.xcodeproj" \
            build_number:"${GITHUB_RUN_NUMBER}"

      # ---------- Build IPA (manual signing) ----------
      - name: Build IPA
        shell: bash
        run: |
          set -e
          cat > exportOptions.plist <<PLIST
          {
            "method": "app-store",
            "provisioningProfiles": { "${IOS_BUNDLE_ID}": "${PROFILE_NAME}" }
          }
          PLIST

          # Use explicit profile + identity
          IDENTITY=$(security find-identity -v -p codesigning build.keychain | awk -F\" '/Apple Distribution/ { print $2; exit }')

          fastlane run build_app \
            scheme:"Runner" \
            workspace:"ios/Runner.xcworkspace" \
            export_method:"app-store" \
            clean:true \
            include_bitcode:false \
            output_directory:"ios/build" \
            output_name:"BitTracker.ipa" \
            codesigning_identity:"$IDENTITY" \
            xcargs:"PRODUCT_BUNDLE_IDENTIFIER=${IOS_BUNDLE_ID} DEVELOPMENT_TEAM=${APPLE_TEAM_ID} CODE_SIGN_STYLE=Manual PROVISIONING_PROFILE_SPECIFIER=${PROFILE_NAME}" \
            export_options:"exportOptions.plist"

          ls -lah ios/build

      # If build fails, print the end of the gym log to console
      - name: Tail gym log on failure
        if: failure()
        run: |
          echo "---- Tail of gym log (if present) ----"
          LOG_DIR="$HOME/Library/Logs/gym"
          if [ -d "$LOG_DIR" ]; then
            LOG_FILE=$(ls -1t "$LOG_DIR" | head -n1)
            if [ -n "$LOG_FILE" ] && [ -f "$LOG_DIR/$LOG_FILE" ]; then
              tail -n 200 "$LOG_DIR/$LOG_FILE" || true
            fi
          fi

      # Always keep logs/DerivedData/ipa artifacts for debugging
      - name: Upload logs and DerivedData
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xcode-and-gym-logs
          path: |
            $HOME/Library/Logs/gym
            ~/Library/Developer/Xcode/DerivedData
            ios/build
          if-no-files-found: ignore

      # ---------- Upload to TestFlight ----------
      - name: Upload to TestFlight
        if: success()
        run: |
          set -e
          fastlane run upload_to_testflight \
            api_key_path:"AuthKey.json" \
            skip_waiting_for_build_processing:true \
            distribute_external:false
          echo "✅ Upload to TestFlight initiated"
