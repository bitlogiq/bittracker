name: iOS TestFlight

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  ios-testflight:
    runs-on: macos-14
    defaults:
      run:
        shell: bash

    env:
      APP_IDENTIFIER: za.co.bitlogiq.bittracker
      TEAM_ID: R4R4AW7JUQ

      MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
      MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}

      ASC_KEY_ID:        ${{ secrets.ASC_KEY_ID }}
      ASC_ISSUER_ID:     ${{ secrets.ASC_ISSUER_ID }}
      ASC_KEY_P8:        ${{ secrets.ASC_KEY_P8 }}

      APP_STORE_CONNECT_API_KEY_PATH: ${{ github.workspace }}/appstore_connect_api_key.json
      # Use root Gemfile even when we cd into ios/
      BUNDLE_GEMFILE: ${{ github.workspace }}/Gemfile

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Flutter packages
        run: |
          set -euo pipefail
          flutter pub get

      - name: Set up Ruby (pin Bundler)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler: '2.4.19'
          bundler-cache: true

      - name: Bundle install (root Gemfile)
        run: |
          set -euo pipefail
          bundle install --jobs 4 --retry 3

      - name: Prepare App Store Connect API key file (JSON)
        run: |
          set -euo pipefail
          # If the secret is base64, decode it; else use as-is
          if echo "$ASC_KEY_P8" | grep -q "BEGIN PRIVATE KEY"; then
            KEY_CONTENT="$ASC_KEY_P8"
          else
            KEY_CONTENT="$(echo "$ASC_KEY_P8" | base64 --decode)"
          fi

          cat > "$APP_STORE_CONNECT_API_KEY_PATH" <<JSON
          {
            "key_id":   "${ASC_KEY_ID}",
            "issuer_id":"${ASC_ISSUER_ID}",
            "key":      "${KEY_CONTENT}",
            "in_house": false
          }
          JSON

      - name: CocoaPods (install)
        working-directory: ios
        run: |
          set -euo pipefail
          bundle exec pod install --verbose

      - name: Show environment (debug)
        run: |
          set -euo pipefail
          which ruby
          ruby -v
          bundle -v
          pod --version || true
          gem env

      - name: Build & upload with fastlane
        working-directory: ios   # ← IMPORTANT: run fastlane where the Fastfile is
        run: |
          set -euo pipefail
          bundle exec fastlane ci

      - name: Archive artifacts (ipa, logs)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-artifacts
          path: |
            ios/build/**/*.ipa
            ~/Library/Logs/gym/**/*.log
            /Users/runner/Library/Logs/gym/**/*.log
            /Users/runner/Library/Developer/Xcode/Archives/**/*.xcarchive
