name: iOS TestFlight

on:
  push:
    branches: [ main, master ]
    paths:
      - "ios/**"
      - "lib/**"
      - "pubspec.yaml"
      - ".github/workflows/ios-testflight.yml"
  workflow_dispatch: {}

jobs:
  ios:
    runs-on: macos-14

    env:
      FLUTTER_VERSION: '3.35.1'
      IOS_BUNDLE_ID: za.co.bitlogiq.bittracker
      APPLE_TEAM_ID: R4R4AW7JUQ
      ASC_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
      ASC_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
      ASC_PRIVATE_KEY_B64: ${{ secrets.ASC_PRIVATE_KEY_B64 }}
      MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
      MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
      MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- Validate required secrets early ----------
      - name: Validate required secrets
        run: |
          set -e
          fail=0
          [ -z "${ASC_KEY_ID}" ] && echo "::error ::APP_STORE_CONNECT_KEY_ID is missing" && fail=1
          [ -z "${ASC_ISSUER_ID}" ] && echo "::error ::APP_STORE_CONNECT_ISSUER_ID is missing" && fail=1
          [ -z "${ASC_PRIVATE_KEY_B64}" ] && echo "::error ::ASC_PRIVATE_KEY_B64 is missing (add base64 of your .p8 Apple API key)" && fail=1
          [ -z "${MATCH_GIT_URL}" ] && echo "::error ::MATCH_GIT_URL is missing" && fail=1
          [ -z "${MATCH_PASSWORD}" ] && echo "::error ::MATCH_PASSWORD is missing" && fail=1
          [ $fail -ne 0 ] && exit 1 || echo "✅ Secrets present"

      # ---------- Flutter / Pods ----------
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          cache: true

      - name: Precache iOS & pub get
        run: |
          set -e
          flutter precache --ios
          flutter pub get

      - name: Export FLUTTER_ROOT
        shell: bash
        run: |
          set -e
          FLUTTER_BIN="$(which flutter)"
          FLUTTER_ROOT="$(cd "$(dirname "$FLUTTER_BIN")/.." && pwd)"
          echo "FLUTTER_ROOT=$FLUTTER_ROOT" >> "$GITHUB_ENV"
          echo "✅ FLUTTER_ROOT=$FLUTTER_ROOT"

      - name: Normalize Generated.xcconfig (Windows path guard)
        run: |
          set -e
          if [ -f ios/Flutter/Generated.xcconfig ] && grep -qi '^FLUTTER_ROOT=c:' ios/Flutter/Generated.xcconfig; then
            echo "Windows path detected in Generated.xcconfig; regenerating..."
            rm -f ios/Flutter/Generated.xcconfig
            flutter pub get
          fi
          test -f ios/Flutter/Generated.xcconfig || (echo "Generated.xcconfig missing after regen" && exit 1)
          echo "✅ ios/Flutter/Generated.xcconfig OK"

      - name: Install Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: false

      - name: Install gems (cocoapods + fastlane)
        run: |
          set -e
          gem install --no-document cocoapods -v "~> 1.15"
          gem install --no-document fastlane   -v ">= 2.222"
          pod --version
          fastlane --version

      - name: Reset Pods
        run: rm -rf ios/Pods ios/Podfile.lock

      - name: Pod repo update & install
        working-directory: ios
        run: |
          set -e
          pod repo update
          pod install
          echo "✅ pod install complete"

      # ---------- Early sanity build (no signing) ----------
      - name: Build iOS (no codesign)
        run: |
          set -e
          flutter build ios --release --no-codesign

      # Useful to see if there are extra targets with their own bundle IDs
      - name: Inspect bundle identifiers
        run: |
          echo "Bundle IDs found in project:"
          grep -R "PRODUCT_BUNDLE_IDENTIFIER" -n ios/Runner.xcodeproj/project.pbxproj | sed 's/.*= "\(.*\)";/\1/' | sort -u || true

      # ---------- Rehydrate API key from base64 and verify EC curve ----------
      - name: Create App Store Connect API key file from base64 (and verify)
        shell: bash
        env:
          ASC_PRIVATE_KEY_B64: ${{ env.ASC_PRIVATE_KEY_B64 }}
          ASC_KEY_ID: ${{ env.ASC_KEY_ID }}
          ASC_ISSUER_ID: ${{ env.ASC_ISSUER_ID }}
        run: |
          set -e
          echo "${ASC_PRIVATE_KEY_B64}" | base64 -d > AuthKey.p8
          if ! openssl pkey -in AuthKey.p8 -noout -text 2>/dev/null | grep -qiE 'prime256v1|secp256r1'; then
            echo "::error ::API key is not EC P-256 (ES256). Recreate a Team Key in App Store Connect → App Store Connect API."; exit 1
          fi
          echo "✅ API key curve OK (P-256)"
          KEY_ESCAPED=$(awk '{gsub(/"/, "\\\""); printf "%s\\n", $0 }' AuthKey.p8)
          cat > AuthKey.json <<JSON
          {
            "key_id": "${ASC_KEY_ID}",
            "issuer_id": "${ASC_ISSUER_ID}",
            "key": "${KEY_ESCAPED}",
            "duration": 1200,
            "in_house": false
          }
          JSON
          echo "✅ AuthKey.json ready"

      # ---------- Signing (FIRST RUN: readonly:false to create certs/profiles) ----------
      - name: Set up keychain & fetch signing with match
        env:
          MATCH_KEYCHAIN_NAME: build.keychain
          MATCH_KEYCHAIN_PASSWORD: temp_password_123
        run: |
          set -e
          fastlane run create_keychain \
            name:"$MATCH_KEYCHAIN_NAME" \
            password:"$MATCH_KEYCHAIN_PASSWORD" \
            default_keychain:true \
            unlock:true \
            timeout:3600

          if [ -n "${MATCH_GIT_BASIC_AUTHORIZATION}" ]; then
            export MATCH_GIT_BASIC_AUTHORIZATION="${MATCH_GIT_BASIC_AUTHORIZATION}"
          fi

          fastlane run match \
            type:"appstore" \
            app_identifier:"${IOS_BUNDLE_ID}" \
            git_url:"${MATCH_GIT_URL}" \
            readonly:false \
            api_key_path:"AuthKey.json" \
            keychain_name:"$MATCH_KEYCHAIN_NAME" \
            keychain_password:"$MATCH_KEYCHAIN_PASSWORD"

      # ---------- Force Automatic signing on all targets ----------
      - name: Switch Xcode project to Automatic signing (all targets)
        run: |
          fastlane run update_code_signing_settings \
            use_automatic_signing:true \
            team_id:"${APPLE_TEAM_ID}" \
            path:"ios/Runner.xcodeproj"

      # ---------- Build IPA (allow provisioning updates) ----------
      - name: Build IPA
        run: |
          set -e
          fastlane run build_app \
            scheme:"Runner" \
            workspace:"ios/Runner.xcworkspace" \
            export_method:"app-store" \
            clean:true \
            include_bitcode:false \
            output_directory:"ios/build" \
            output_name:"BitTracker.ipa" \
            allow_provisioning_updates:true \
            xcargs:"DEVELOPMENT_TEAM=${APPLE_TEAM_ID} PRODUCT_BUNDLE_IDENTIFIER=${IOS_BUNDLE_ID} CODE_SIGN_STYLE=Automatic"
          ls -lah ios/build

      # If build fails, print the end of the gym log to console
      - name: Tail gym log on failure
        if: failure()
        run: |
          echo "---- Tail of gym log (if present) ----"
          LOG_DIR="$HOME/Library/Logs/gym"
          if [ -d "$LOG_DIR" ]; then
            LOG_FILE=$(ls -1t "$LOG_DIR" | head -n1)
            if [ -n "$LOG_FILE" ] && [ -f "$LOG_DIR/$LOG_FILE" ]; then
              tail -n 200 "$LOG_DIR/$LOG_FILE" || true
            fi
          fi

      # Always keep logs/DerivedData/ipa artifacts for debugging
      - name: Upload logs and DerivedData
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xcode-and-gym-logs
          path: |
            $HOME/Library/Logs/gym
            ~/Library/Developer/Xcode/DerivedData
            ios/build
          if-no-files-found: ignore

      - name: Upload to TestFlight
        if: success()
        run: |
          set -e
          fastlane run upload_to_testflight \
            api_key_path:"AuthKey.json" \
            skip_waiting_for_build_processing:true \
            distribute_external:false
          echo "✅ Upload to TestFlight initiated"
