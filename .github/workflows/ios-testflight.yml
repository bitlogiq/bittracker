name: iOS TestFlight (Build only)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

jobs:
  build-ios:
    runs-on: macos-14

    env:
      FLUTTER_VERSION: "3.35.1"

      # Provided via GitHub Secrets
      IOS_BUNDLE_ID: ${{ secrets.IOS_BUNDLE_ID }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      IOS_P12_B64: ${{ secrets.IOS_P12_B64 }}
      IOS_P12_PASSWORD: ${{ secrets.IOS_P12_PASSWORD }}
      IOS_MOBILEPROVISION_B64: ${{ secrets.IOS_MOBILEPROVISION_B64 }}
      PROFILE_UUID: ${{ secrets.PROFILE_UUID }}
      PROFILE_NAME: ${{ secrets.PROFILE_NAME }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable

      - name: Flutter pub get
        run: flutter pub get

      # ----- KEYCHAIN + CERT -----
      - name: Create keychain and import cert
        shell: bash
        run: |
          set -e
          KEYCHAIN=build.keychain
          security create-keychain -p "" "$KEYCHAIN"
          security set-keychain-settings -lut 21600 "$KEYCHAIN"
          security list-keychains -d user -s "$KEYCHAIN" $(security list-keychains -d user | sed s/\"//g)
          security default-keychain -s "$KEYCHAIN"
          security unlock-keychain -p "" "$KEYCHAIN"

          # decode .p12
          echo "$IOS_P12_B64" | base64 --decode > dist.p12

          # import .p12
          security import dist.p12 -k "$KEYCHAIN" -P "$IOS_P12_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security
          security set-key-partition-list -S apple-tool:,apple: -s -k "" "$KEYCHAIN"

      # ----- PROVISIONING PROFILE -----
      - name: Install provisioning profile
        shell: bash
        run: |
          set -e
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          echo "$IOS_MOBILEPROVISION_B64" | base64 --decode > "$HOME/Library/MobileDevice/Provisioning Profiles/${PROFILE_UUID}.mobileprovision"
          ls -la "$HOME/Library/MobileDevice/Provisioning Profiles"

      # ----- COCOAPODS -----
      - name: CocoaPods install
        shell: bash
        run: |
          set -e
          sudo gem install cocoapods -N
          cd ios
          pod repo update
          pod install
          ls -la Podfile Podfile.lock Pods/Manifest.lock

      # ----- exportOptions.plist -----
      - name: Create exportOptions.plist
        shell: bash
        run: |
          cat > exportOptions.plist <<'PLIST'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>app-store</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>${IOS_BUNDLE_ID}</key>
              <string>${PROFILE_NAME}</string>
            </dict>
            <key>uploadBitcode</key>
            <false/>
            <key>compileBitcode</key>
            <false/>
            <key>destination</key>
            <string>export</string>
          </dict>
          </plist>
          PLIST
          echo "Wrote exportOptions.plist:"
          cat exportOptions.plist

      # ----- BUILD (Fastlane gym) -----
      - name: Build (Fastlane gym)
        shell: bash
        run: |
          set -e
          # Optional: print Xcode version
          xcodebuild -version

          fastlane run build_app \
            workspace:"ios/Runner.xcworkspace" \
            scheme:"Runner" \
            configuration:"Release" \
            clean:true \
            export_method:"app-store" \
            output_directory:"ios/build" \
            output_name:"BitTracker.ipa" \
            xcargs:"ONLY_ACTIVE_ARCH=NO PRODUCT_BUNDLE_IDENTIFIER=${IOS_BUNDLE_ID} DEVELOPMENT_TEAM=${APPLE_TEAM_ID} CODE_SIGN_STYLE=Manual PODS_PODFILE_DIR_PATH=\$SRCROOT" \
            export_options:"exportOptions.plist"

      # ----- ARTIFACTS -----
      - name: Upload .xcarchive
        uses: actions/upload-artifact@v4
        with:
          name: ios-xcarchive
          path: /Users/runner/Library/Developer/Xcode/Archives/**/BitTracker*.xcarchive

      - name: Upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: ios/build/*.ipa

      # (Optional) Clean up keychain
      - name: Cleanup keychain
        if: always()
        run: |
          security delete-keychain build.keychain || true
