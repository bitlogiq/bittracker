name: iOS TestFlight

on:
  push:
    branches: [ main, master ]
    paths:
      - "ios/**"
      - "lib/**"
      - "pubspec.yaml"
      - ".github/workflows/ios-testflight.yml"
  workflow_dispatch: {}

jobs:
  ios:
    runs-on: macos-14

    env:
      FLUTTER_VERSION: '3.35.1'
      IOS_BUNDLE_ID: ${{ secrets.IOS_BUNDLE_ID }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      ASC_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
      ASC_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
      # IMPORTANT: base64-encoded contents of your .p8 key file
      ASC_PRIVATE_KEY_B64: ${{ secrets.ASC_PRIVATE_KEY_B64 }}
      MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
      MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
      MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---- Flutter toolchain ----
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          cache: true

      - name: Precache iOS & pub get
        run: |
          set -e
          flutter precache --ios
          flutter pub get

      - name: Export FLUTTER_ROOT
        shell: bash
        run: |
          FLUTTER_BIN="$(which flutter)"
          FLUTTER_ROOT="$(cd "$(dirname "$FLUTTER_BIN")/.." && pwd)"
          echo "FLUTTER_ROOT=$FLUTTER_ROOT" >> "$GITHUB_ENV"

      - name: Normalize Generated.xcconfig (Windows path guard)
        run: |
          set -e
          if [ -f ios/Flutter/Generated.xcconfig ] && grep -qi '^FLUTTER_ROOT=c:' ios/Flutter/Generated.xcconfig; then
            echo "Windows path detected; regenerating..."
            rm -f ios/Flutter/Generated.xcconfig
            flutter pub get
          fi
          test -f ios/Flutter/Generated.xcconfig || (echo "Generated.xcconfig missing" && exit 1)

      # ---- Ruby / Pods / Fastlane ----
      - name: Install Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: false

      - name: Install gems (cocoapods + fastlane)
        run: |
          set -e
          gem install --no-document cocoapods -v "~> 1.15"
          gem install --no-document fastlane   -v ">= 2.222"
          pod --version
          fastlane --version

      - name: Reset Pods
        run: rm -rf ios/Pods ios/Podfile.lock

      - name: Pod repo update & install
        working-directory: ios
        run: |
          set -e
          pod repo update
          pod install
          echo "✅ pod install complete"

      # ---- Early sanity build (no signing) to catch Pod/Swift issues ----
      - name: Build iOS (no codesign)
        run: |
          set -e
          flutter build ios --release --no-codesign

      # ---- Rehydrate the .p8 and build a valid AuthKey.json for Fastlane ----
      - name: Create App Store Connect API key file from base64
        shell: bash
        run: |
          set -e
          if [ -z "${ASC_PRIVATE_KEY_B64}" ]; then
            echo "ASC_PRIVATE_KEY_B64 secret is missing"; exit 1
          fi
          # Decode to raw .p8, strip any CRLFs just in case
          echo "${ASC_PRIVATE_KEY_B64}" | base64 -d | tr -d '\r' > AuthKey.p8

          # Optional: verify key curve is prime256v1 / secp256r1 (ES256)
          if command -v openssl >/dev/null 2>&1; then
            if ! openssl pkey -in AuthKey.p8 -noout -text 2>/dev/null | grep -qiE 'prime256v1|secp256r1'; then
              echo "::warning ::Could not verify EC curve as P-256; ensure this is the Apple ASC .p8 key (ES256)."
            fi
          fi

          # Escape into JSON string with literal \n line breaks, escape any quotes
          KEY_ESCAPED=$(awk '{gsub(/"/, "\\\""); printf "%s\\n", $0 }' AuthKey.p8)

          cat > AuthKey.json <<JSON
          {
            "key_id": "${ASC_KEY_ID}",
            "issuer_id": "${ASC_ISSUER_ID}",
            "key": "${KEY_ESCAPED}",
            "duration": 1200,
            "in_house": false
          }
          JSON

          echo "✅ AuthKey.json created"

      # ---- Keychain + match (FIRST run creates certs/profiles; set readonly:true later) ----
      - name: Set up keychain & fetch signing with match
        env:
          MATCH_KEYCHAIN_NAME: build.keychain
          MATCH_KEYCHAIN_PASSWORD: temp_password_123
        run: |
          set -e
          fastlane run create_keychain \
            name:"$MATCH_KEYCHAIN_NAME" \
            password:"$MATCH_KEYCHAIN_PASSWORD" \
            default_keychain:true \
            unlock:true \
            timeout:3600

          if [ -n "${MATCH_GIT_BASIC_AUTHORIZATION}" ]; then
            export MATCH_GIT_BASIC_AUTHORIZATION="${MATCH_GIT_BASIC_AUTHORIZATION}"
          fi

          # FIRST SUCCESSFUL RUN ONLY: allow creation (readonly:false)
          fastlane run match \
            type:"appstore" \
            app_identifier:"${IOS_BUNDLE_ID}" \
            git_url:"${MATCH_GIT_URL}" \
            readonly:false \
            api_key_path:"AuthKey.json" \
            keychain_name:"$MATCH_KEYCHAIN_NAME" \
            keychain_password:"$MATCH_KEYCHAIN_PASSWORD"

      # ---- Build IPA with fastlane (gym) ----
      - name: Build IPA
        run: |
          set -e
          fastlane run build_app \
            scheme:"Runner" \
            workspace:"ios/Runner.xcworkspace" \
            export_method:"app-store" \
            clean:true \
            include_bitcode:false \
            output_directory:"ios/build" \
            output_name:"BitTracker.ipa" \
            xcargs:"DEVELOPMENT_TEAM=${APPLE_TEAM_ID} PRODUCT_BUNDLE_IDENTIFIER=${IOS_BUNDLE_ID}"
          ls -lah ios/build

      # ---- Upload to TestFlight ----
      - name: Upload to TestFlight
        run: |
          set -e
          fastlane run upload_to_testflight \
            api_key_path:"AuthKey.json" \
            skip_waiting_for_build_processing:true \
            distribute_external:false
          echo "✅ Upload to TestFlight initiated"

      # ---- Keep artifacts (IPA) ----
      - name: Keep artifacts (IPA)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: ios/build/*.ipa
          if-no-files-found: warn
