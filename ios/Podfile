platform :ios, '12.0'

ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

require 'fileutils'

# ---- Ensure FLUTTER_ROOT and load podhelper safely ----
def setup_flutter_env!
  # Resolve Flutter SDK root from `flutter` on PATH
  flutter_bin = `which flutter`.strip
  if flutter_bin.empty?
    raise 'flutter not found on PATH; ensure CI sets up Flutter before pod install'
  end
  flutter_root = File.expand_path('..', File.dirname(flutter_bin))

  # Make sure ENV is set for podhelper.rb
  ENV['FLUTTER_ROOT'] ||= flutter_root

  # Prefer local podhelper (generated by Flutter), else fall back to SDK copy
  local_podhelper = File.expand_path(File.join('Flutter', 'podhelper'), __dir__)
  if File.exist?("#{local_podhelper}.rb")
    require local_podhelper
    return
  end

  sdk_podhelper = File.join(flutter_root, 'packages', 'flutter_tools', 'bin', 'podhelper.rb')
  unless File.exist?(sdk_podhelper)
    raise "Could not find podhelper.rb at #{sdk_podhelper}"
  end

  # Best-effort: copy into ios/Flutter for future runs
  flutter_dir = File.expand_path('Flutter', __dir__)
  Dir.mkdir(flutter_dir) unless Dir.exist?(flutter_dir)
  begin
    FileUtils.cp(sdk_podhelper, File.join(flutter_dir, 'podhelper.rb'))
  rescue
    # ignore copy errors; we can still require from SDK path
  end

  require sdk_podhelper.sub(/\.rb$/, '')
end

setup_flutter_env!

# ---- Standard Flutter CocoaPods setup ----
flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks! :linkage => :static
  use_modular_headers!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

post_install do |installer|
  installer.pods_project.targets.each do |t|
    t.build_configurations.each do |c|
      c.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '12.0'
      # Fix sim build on Apple Silicon
      c.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
    end
  end
end
